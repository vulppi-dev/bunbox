name: Build shaderc

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/build-shaderc.yml'

jobs:
  linux-x64:
    name: Linux x64
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 3

      # Build shaderc
      - name: Install shaderc dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 ninja-build

      - name: Clone shaderc and dependencies
        run: |
          git clone --depth 1 https://github.com/google/shaderc.git shaderc
          cd shaderc/third_party
          git clone --depth 1 https://github.com/KhronosGroup/glslang.git
          git clone --depth 1 https://github.com/KhronosGroup/SPIRV-Tools.git spirv-tools
          git clone --depth 1 https://github.com/KhronosGroup/SPIRV-Headers.git spirv-headers

      - name: Build shaderc
        run: |
          cd shaderc
          cmake -S . -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DSHADERC_SKIP_TESTS=ON -DSHADERC_SKIP_EXAMPLES=ON -DSHADERC_SKIP_COPYRIGHT_CHECK=ON
          cmake --build build --config Release --target shaderc_shared
          strip build/libshaderc/libshaderc_shared.so

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/x64/linux
          cp shaderc/build/libshaderc/libshaderc_shared.so* artifacts/x64/linux/libshaderc.so || cp shaderc/build/libshaderc/libshaderc_shared.so artifacts/x64/linux/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: artifacts/
          retention-days: 7

  linux-arm64:
    name: Linux ARM64
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 3

      - name: Install dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get -yq update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -yq install cmake gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross python3 ninja-build

      - name: Prepare cross-compilation for arm64
        run: |
          sudo grep 'deb ' /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/ports.list
          sudo sed -i 's/^deb /deb [arch=amd64] /' /etc/apt/sources.list
          sudo sed -i 's#^deb [^ ]\+#deb [arch=arm64] https://ports.ubuntu.com/ubuntu-ports/#' /etc/apt/sources.list.d/ports.list
          sudo dpkg --add-architecture arm64
          sudo apt-get update || true

      - name: Install cross-compilation dependencies
        run: sudo apt-get -yq --allow-unauthenticated install libgl1-mesa-dev:arm64 x11proto-dev libx11-dev:arm64 libxml2:arm64 -o Dpkg::Options::="--force-overwrite"

      # Build shaderc
      - name: Clone shaderc and dependencies
        run: |
          git clone --depth 1 https://github.com/google/shaderc.git shaderc
          cd shaderc/third_party
          git clone --depth 1 https://github.com/KhronosGroup/glslang.git
          git clone --depth 1 https://github.com/KhronosGroup/SPIRV-Tools.git spirv-tools
          git clone --depth 1 https://github.com/KhronosGroup/SPIRV-Headers.git spirv-headers

      - name: Build shaderc
        run: |
          cd shaderc
          cat > toolchain-aarch64.cmake << 'EOF'
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR aarch64)
          set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
          set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
          set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF
          cmake -S . -B build \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=toolchain-aarch64.cmake \
            -DSHADERC_SKIP_TESTS=ON \
            -DSHADERC_SKIP_EXAMPLES=ON \
            -DSHADERC_SKIP_COPYRIGHT_CHECK=ON
          cmake --build build --config Release --target shaderc_shared || echo "shaderc build may fail on ARM64 cross-compilation"
          aarch64-linux-gnu-strip build/libshaderc/libshaderc_shared.so* || true

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/arm64/linux logs/linux-arm64

          echo "--- shaderc build output ---" > logs/linux-arm64/shaderc.txt
          ls -la shaderc/build/libshaderc 2>/dev/null || true >> logs/linux-arm64/shaderc.txt

          # Copy shaderc if present, otherwise create a placeholder and note in logs
          if compgen -G "shaderc/build/libshaderc/libshaderc_shared.so*" > /dev/null; then
            cp shaderc/build/libshaderc/libshaderc_shared.so* artifacts/arm64/linux/libshaderc.so || true
            echo "shaderc: copied" >> logs/linux-arm64/shaderc.txt
          else
            echo "shaderc: not built" >> logs/linux-arm64/shaderc.txt
            touch artifacts/arm64/linux/libshaderc.so
          fi

          ls -la artifacts/arm64/linux || true
          cp -r logs/linux-arm64 artifacts/arm64/linux/ || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: artifacts/
          retention-days: 7

  macos:
    name: macOS
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64, arm64]
        include:
          - ARCH: x64
            PLATFORM: osx-x64
            CMAKE_ARCH: x86_64
            OSX_MIN: '10.15.4'
          - ARCH: arm64
            PLATFORM: osx-arm64
            CMAKE_ARCH: arm64
            OSX_MIN: '11.0'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 3

      # Build shaderc
      - name: Install dependencies
        run: brew install ninja

      - name: Clone shaderc and dependencies
        run: |
          git clone --depth 1 https://github.com/google/shaderc.git shaderc
          cd shaderc/third_party
          git clone --depth 1 https://github.com/KhronosGroup/glslang.git
          git clone --depth 1 https://github.com/KhronosGroup/SPIRV-Tools.git spirv-tools
          git clone --depth 1 https://github.com/KhronosGroup/SPIRV-Headers.git spirv-headers

      - name: Build shaderc
        run: |
          cd shaderc
          cmake -S . -B build \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=${{matrix.CMAKE_ARCH}} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{matrix.OSX_MIN}} \
            -DSHADERC_SKIP_TESTS=ON \
            -DSHADERC_SKIP_EXAMPLES=ON \
            -DSHADERC_SKIP_COPYRIGHT_CHECK=ON
          cmake --build build --config Release --target shaderc_shared
          strip -u -r build/libshaderc/libshaderc_shared.dylib

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/${{matrix.ARCH}}/darwin
          find shaderc/build/libshaderc -name "libshaderc_shared*.dylib" -exec cp {} artifacts/${{matrix.ARCH}}/darwin/libshaderc.dylib \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{matrix.ARCH}}
          path: artifacts/
          retention-days: 7

  windows-x64:
    name: Windows x64
    runs-on: windows-2022
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 3

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      # Build shaderc
      - name: Install dependencies
        run: choco install ninja -y
        shell: cmd

      - name: Clone shaderc and dependencies
        run: |
          git clone --depth 1 https://github.com/google/shaderc.git shaderc
          cd shaderc\third_party
          git clone --depth 1 https://github.com/KhronosGroup/glslang.git
          git clone --depth 1 https://github.com/KhronosGroup/SPIRV-Tools.git spirv-tools
          git clone --depth 1 https://github.com/KhronosGroup/SPIRV-Headers.git spirv-headers

      - name: Build shaderc
        run: |
          cd shaderc
          cmake -S . -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DSHADERC_SKIP_TESTS=ON -DSHADERC_SKIP_EXAMPLES=ON -DSHADERC_SKIP_COPYRIGHT_CHECK=ON
          cmake --build build --config Release --target shaderc_shared

      - name: Prepare artifacts
        run: |
          mkdir artifacts\x64\win32
          copy shaderc\build\libshaderc\shaderc_shared.dll artifacts\x64\win32\shaderc.dll
        shell: cmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64
          path: artifacts/
          retention-days: 7
