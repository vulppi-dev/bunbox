name: Build shaderc (dynamic lib)

on:
  workflow_dispatch:
  push:
    branches: [master]
    paths: ['.github/workflows/build-shaderc.yml']

jobs:
  build:
    name: Build ${{ matrix.id }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: linux-x64
            os: ubuntu-22.04
            target_os: linux
            arch: x64
            is_cross: false

          - id: linux-arm64
            os: ubuntu-22.04
            target_os: linux
            arch: arm64
            is_cross: true

          - id: macos-x64
            os: macos-14
            target_os: macos
            arch: x64
            cmake_arch: x86_64
            osx_min: '10.15.4'

          - id: macos-arm64
            os: macos-14
            target_os: macos
            arch: arm64
            cmake_arch: arm64
            osx_min: '11.0'

          - id: windows-x64
            os: windows-2022
            target_os: windows
            arch: x64

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.id }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 3 }

      # ---------- Linux setup ----------
      - name: Install toolchain (Linux)
        if: matrix.target_os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git cmake python3 ninja-build

      - name: Install cross toolchain (Linux ARM64)
        if: matrix.target_os == 'linux' && matrix.is_cross == true
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross

      # ---------- Clone & sync deps ----------
      - name: Clone google/shaderc
        run: |
          git clone --depth 1 https://github.com/google/shaderc.git shaderc
          cd shaderc
          # Try the official dependency sync script; fallback to submodules if absent
          if [ -f "utils/git-sync-deps" ]; then
            python3 utils/git-sync-deps
          else
            git submodule update --init --recursive
          fi

      # ---------- Build (Linux) ----------
      - name: Build shaderc (Linux)
        if: matrix.target_os == 'linux'
        run: |
          cd shaderc

          # Optional cross-compile toolchain for ARM64
          if [ "${{ matrix.is_cross }}" = "true" ]; then
            cat > toolchain-aarch64.cmake << 'EOF'
            set(CMAKE_SYSTEM_NAME Linux)
            set(CMAKE_SYSTEM_PROCESSOR aarch64)
            set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
            set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
            set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)
            set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
            set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
            set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
            EOF
            CMAKE_TOOLCHAIN="-DCMAKE_TOOLCHAIN_FILE=toolchain-aarch64.cmake"
          else
            CMAKE_TOOLCHAIN=""
          fi

          cmake -S . -B build -G Ninja \
            -DBUILD_SHARED_LIBS=ON \
            -DSHADERC_SKIP_TESTS=ON \
            -DSHADERC_SKIP_EXAMPLES=ON \
            -DCMAKE_BUILD_TYPE=Release \
            ${CMAKE_TOOLCHAIN}

          cmake --build build --config Release --parallel --target shaderc_shared

          # Collect outputs (+ normalized copy)
          mkdir -p ../artifacts/linux/${{ matrix.arch }}
          # primary name from build
          find build -name "libshaderc_shared.so" -exec cp {} ../artifacts/linux/${{ matrix.arch }}/ \; -quit
          # normalized name like LWJGL
          if [ -f ../artifacts/linux/${{ matrix.arch }}/libshaderc_shared.so ]; then
            cp ../artifacts/linux/${{ matrix.arch }}/libshaderc_shared.so ../artifacts/linux/${{ matrix.arch }}/libshaderc.so
            strip ../artifacts/linux/${{ matrix.arch }}/libshaderc*.so || true
          fi

      # ---------- Build (macOS) ----------
      - name: Build shaderc (macOS)
        if: matrix.target_os == 'macos'
        run: |
          cd shaderc
          cmake -S . -B build \
            -DBUILD_SHARED_LIBS=ON \
            -DSHADERC_SKIP_TESTS=ON \
            -DSHADERC_SKIP_EXAMPLES=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.cmake_arch }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.osx_min }}
          cmake --build build --config Release --parallel --target shaderc_shared

          mkdir -p ../artifacts/macos/${{ matrix.arch }}
          # primary name
          find build -name "libshaderc_shared.dylib" -exec cp {} ../artifacts/macos/${{ matrix.arch }}/ \; -quit
          # normalized name
          if [ -f ../artifacts/macos/${{ matrix.arch }}/libshaderc_shared.dylib ]; then
            cp ../artifacts/macos/${{ matrix.arch }}/libshaderc_shared.dylib ../artifacts/macos/${{ matrix.arch }}/libshaderc.dylib
            strip -u -r ../artifacts/macos/${{ matrix.arch }}/libshaderc*.dylib || true
          fi

      # ---------- Build (Windows) ----------
      - name: Setup MSVC
        if: matrix.target_os == 'windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Build shaderc (Windows)
        if: matrix.target_os == 'windows'
        shell: cmd
        run: |
          cd shaderc
          cmake -S . -B build -A x64 ^
            -DBUILD_SHARED_LIBS=ON ^
            -DSHADERC_SKIP_TESTS=ON ^
            -DSHADERC_SKIP_EXAMPLES=ON ^
            -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release --target shaderc_shared

          mkdir artifacts
          for %%F in (build\**\shaderc_shared.dll) do copy "%%F" artifacts\shaderc_shared.dll
          if exist artifacts\shaderc_shared.dll copy artifacts\shaderc_shared.dll artifacts\shaderc.dll

          mkdir ..\artifacts\windows\x64
          if exist artifacts\shaderc.dll copy artifacts\shaderc.dll ..\artifacts\windows\x64\shaderc.dll

      # ---------- Upload ----------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: shaderc-${{ matrix.id }}
          path: artifacts/
          retention-days: 7
