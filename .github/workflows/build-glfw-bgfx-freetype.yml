name: Build GLFW, bgfx and FreeType

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/build-glfw-bgfx-freetype.yml'

jobs:
  linux-x64:
    name: Linux x64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 3

      # Build GLFW
      - name: Install GLFW dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libwayland-dev libxkbcommon-dev

      - name: Clone and build GLFW
        run: |
          git clone --depth 1 https://github.com/glfw/glfw.git glfw
          cd glfw
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF
          cmake --build build --config Release
          strip build/src/libglfw.so*

      # Build bgfx
      - name: Install bgfx dependencies
        run: sudo apt-get install -y libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev x11proto-dev libx11-dev

      - name: Clone bx, bimg & GENie
        run: |
          git clone --depth 1 https://github.com/bkaradzic/bx.git bx
          git clone --depth 1 https://github.com/bkaradzic/bimg.git bimg
          git clone https://github.com/bkaradzic/GENie.git GENie
          cd GENie
          make

      - name: Build bgfx
        run: |
          git clone --depth 1 https://github.com/bkaradzic/bgfx.git bgfx
          cd bgfx
          ../GENie/bin/linux/genie --with-shared-lib --gcc=linux-gcc gmake
          make -R -C .build/projects/gmake-linux-gcc config=release64 bgfx-shared-lib
          strip .build/linux64_gcc/bin/libbgfx-shared-libRelease.so

      # Build FreeType
      - name: Clone and build FreeType
        run: |
          git clone --depth 1 https://github.com/freetype/freetype.git freetype
          cd freetype
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DFT_DISABLE_HARFBUZZ=ON -DFT_DISABLE_BZIP2=ON -DFT_DISABLE_PNG=ON -DFT_DISABLE_BROTLI=ON
          cmake --build build --config Release
          strip build/libfreetype.so*

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/linux/x64
          cp glfw/build/src/libglfw.so* artifacts/linux/x64/libglfw.so || cp glfw/build/src/libglfw.so artifacts/linux/x64/
          cp bgfx/.build/linux64_gcc/bin/libbgfx-shared-libRelease.so artifacts/linux/x64/libbgfx.so
          cp freetype/build/libfreetype.so* artifacts/linux/x64/libfreetype.so || cp freetype/build/libfreetype.so artifacts/linux/x64/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: artifacts/
          retention-days: 7

  linux-arm64:
    name: Linux ARM64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 3

      - name: Install dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get -yq update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -yq install cmake gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Prepare cross-compilation for arm64
        run: |
          sudo grep 'deb ' /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/ports.list
          sudo sed -i 's/^deb /deb [arch=amd64] /' /etc/apt/sources.list
          sudo sed -i 's#^deb [^ ]\+#deb [arch=arm64] https://ports.ubuntu.com/ubuntu-ports/#' /etc/apt/sources.list.d/ports.list
          sudo dpkg --add-architecture arm64
          sudo apt-get update || true

      - name: Install cross-compilation dependencies
        run: sudo apt-get -yq --allow-unauthenticated install libgl1-mesa-dev:arm64 x11proto-dev:arm64 libx11-dev:arm64 -o Dpkg::Options::="--force-overwrite"

      # Build GLFW
      - name: Clone and build GLFW
        run: |
          git clone --depth 1 https://github.com/glfw/glfw.git glfw
          cd glfw
          cat > toolchain-aarch64.cmake << 'EOF'
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR aarch64)
          set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
          set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
          set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=toolchain-aarch64.cmake \
            -DBUILD_SHARED_LIBS=ON \
            -DGLFW_BUILD_EXAMPLES=OFF \
            -DGLFW_BUILD_TESTS=OFF \
            -DGLFW_BUILD_DOCS=OFF \
            -DGLFW_BUILD_WAYLAND=OFF \
            -DGLFW_BUILD_X11=OFF || echo "GLFW build may fail on ARM64 cross-compilation"
          cmake --build build --config Release || echo "GLFW build failed, continuing..."

      # Build bgfx
      - name: Clone bx, bimg & GENie
        run: |
          git clone --depth 1 https://github.com/bkaradzic/bx.git bx
          git clone --depth 1 https://github.com/bkaradzic/bimg.git bimg
          git clone https://github.com/bkaradzic/GENie.git GENie
          cd GENie
          make

      - name: Build bgfx
        run: |
          git clone --depth 1 https://github.com/bkaradzic/bgfx.git bgfx
          cd bgfx

          # Modify toolchain.lua to use correct strip command
          sed -i 's/strip -s/aarch64-linux-gnu-strip/' ../bx/scripts/toolchain.lua

          ../GENie/bin/linux/genie --with-shared-lib --gcc=linux-arm-gcc gmake

          make -R -C .build/projects/gmake-linux-arm-gcc config=release \
            CXX="aarch64-linux-gnu-g++" \
            CC="aarch64-linux-gnu-gcc" \
            CFLAGS="-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0" \
            bgfx-shared-lib

          aarch64-linux-gnu-strip .build/linux32_arm_gcc/bin/libbgfx-shared-libRelease.so

      # Build FreeType
      - name: Clone and build FreeType
        run: |
          git clone --depth 1 https://github.com/freetype/freetype.git freetype
          cd freetype
          cat > toolchain-aarch64.cmake << 'EOF'
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR aarch64)
          set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
          set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
          set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=toolchain-aarch64.cmake \
            -DBUILD_SHARED_LIBS=ON \
            -DFT_DISABLE_HARFBUZZ=ON \
            -DFT_DISABLE_BZIP2=ON \
            -DFT_DISABLE_PNG=ON \
            -DFT_DISABLE_BROTLI=ON
          cmake --build build --config Release
          aarch64-linux-gnu-strip build/libfreetype.so* || true

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/linux/arm64 logs/linux-arm64

          echo "--- GLFW build output ---" > logs/linux-arm64/glfw.txt
          ls -la glfw/build 2>/dev/null || true >> logs/linux-arm64/glfw.txt

          # Copy GLFW if present, otherwise create a placeholder and note in logs
          if compgen -G "glfw/build/src/libglfw*.so*" > /dev/null; then
            cp glfw/build/src/libglfw*.so* artifacts/linux/arm64/ || true
            echo "GLFW: copied" >> logs/linux-arm64/glfw.txt
          else
            echo "GLFW: not built" >> logs/linux-arm64/glfw.txt
            touch artifacts/linux/arm64/libglfw.so
          fi

          echo "--- bgfx build output ---" > logs/linux-arm64/bgfx.txt
          if [ -d "bgfx/.build" ]; then ls -la bgfx/.build >> logs/linux-arm64/bgfx.txt; fi

          # Prefer the expected path, fallback to any libbgfx found under .build
          BGFX_EXPECTED="bgfx/.build/linux32_arm_gcc/bin/libbgfx-shared-libRelease.so"
          if [ -f "$BGFX_EXPECTED" ]; then
            cp "$BGFX_EXPECTED" artifacts/linux/arm64/libbgfx.so
            echo "bgfx: copied from expected path" >> logs/linux-arm64/bgfx.txt
          else
            echo "bgfx: expected file not found, searching .build for libbgfx" >> logs/linux-arm64/bgfx.txt
            find bgfx/.build -name "libbgfx*.so*" -print -exec cp {} artifacts/linux/arm64/libbgfx.so \; -quit 2>/dev/null || true
            if [ -f artifacts/linux/arm64/libbgfx.so ]; then
              echo "bgfx: copied from fallback" >> logs/linux-arm64/bgfx.txt
            else
              echo "bgfx: not built" >> logs/linux-arm64/bgfx.txt
              exit 1
            fi
          fi

          if [ ! -s artifacts/linux/arm64/libbgfx.so ]; then
            echo "bgfx: artifact is empty" >> logs/linux-arm64/bgfx.txt
            exit 1
          fi

          echo "--- FreeType build output ---" > logs/linux-arm64/freetype.txt
          ls -la freetype/build 2>/dev/null || true >> logs/linux-arm64/freetype.txt
          if compgen -G "freetype/build/libfreetype*.so*" > /dev/null; then
            cp freetype/build/libfreetype*.so* artifacts/linux/arm64/ || true
            echo "FreeType: copied" >> logs/linux-arm64/freetype.txt
          else
            echo "FreeType: not built" >> logs/linux-arm64/freetype.txt
            touch artifacts/linux/arm64/libfreetype.so
          fi

          ls -la artifacts/linux/arm64 || true
          cp -r logs/linux-arm64 artifacts/linux/arm64/ || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: artifacts/
          retention-days: 7

  macos:
    name: macOS
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64, arm64]
        include:
          - ARCH: x64
            PLATFORM: osx-x64
            CMAKE_ARCH: x86_64
            OSX_MIN: '10.15.4'
          - ARCH: arm64
            PLATFORM: osx-arm64
            CMAKE_ARCH: arm64
            OSX_MIN: '11.0'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 3

      # Build GLFW
      - name: Clone and build GLFW
        run: |
          git clone --depth 1 https://github.com/glfw/glfw.git glfw
          cd glfw
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=${{matrix.CMAKE_ARCH}} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{matrix.OSX_MIN}} \
            -DBUILD_SHARED_LIBS=ON \
            -DGLFW_BUILD_EXAMPLES=OFF \
            -DGLFW_BUILD_TESTS=OFF \
            -DGLFW_BUILD_DOCS=OFF
          cmake --build build --config Release
          strip -u -r build/src/libglfw*.dylib

      # Build bgfx
      - name: Clone bx, bimg & GENie
        run: |
          git clone --depth 1 https://github.com/bkaradzic/bx.git bx
          git clone --depth 1 https://github.com/bkaradzic/bimg.git bimg

      - name: Build bgfx (Metal only)
        run: |
          git clone --depth 1 https://github.com/bkaradzic/bgfx.git bgfx
          cd bgfx
          MACOSX_DEPLOYMENT_TARGET=${{matrix.OSX_MIN}} \
          CFLAGS="-mmacosx-version-min=${{matrix.OSX_MIN}}" \
          LDFLAGS="-mmacosx-version-min=${{matrix.OSX_MIN}}" \
          ../bx/tools/bin/darwin/genie --with-shared-lib --with-macos=${{matrix.OSX_MIN}} --gcc=${{matrix.PLATFORM}} gmake

          # Fix syntax error in renderer_mtl.mm if present
          if grep -q "MTL_RELEASE(m_screenshotBlitRenderPipelineState)$" src/renderer_mtl.mm 2>/dev/null; then
            sed -i '' 's/MTL_RELEASE(m_screenshotBlitRenderPipelineState)$/MTL_RELEASE(m_screenshotBlitRenderPipelineState);/g' src/renderer_mtl.mm
          fi

          MACOSX_DEPLOYMENT_TARGET=${{matrix.OSX_MIN}} \
          CFLAGS="-mmacosx-version-min=${{matrix.OSX_MIN}} -D BGFX_CONFIG_RENDERER_METAL=1 -D BGFX_CONFIG_RENDERER_OPENGL=0 -D BGFX_CONFIG_RENDERER_VULKAN=0 -D BGFX_CONFIG_RENDERER_DIRECT3D9=0 -D BGFX_CONFIG_RENDERER_DIRECT3D11=0 -D BGFX_CONFIG_RENDERER_DIRECT3D12=0" \
          LDFLAGS="-mmacosx-version-min=${{matrix.OSX_MIN}}" \
          make -C .build/projects/gmake-${{matrix.PLATFORM}} config=release64 bgfx-shared-lib
          strip -u -r .build/${{matrix.PLATFORM}}/bin/libbgfx-shared-libRelease.dylib

      # Build FreeType
      - name: Clone and build FreeType
        run: |
          git clone --depth 1 https://github.com/freetype/freetype.git freetype
          cd freetype
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=${{matrix.CMAKE_ARCH}} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{matrix.OSX_MIN}} \
            -DBUILD_SHARED_LIBS=ON \
            -DFT_DISABLE_HARFBUZZ=ON \
            -DFT_DISABLE_BZIP2=ON \
            -DFT_DISABLE_PNG=ON \
            -DFT_DISABLE_BROTLI=ON
          cmake --build build --config Release
          strip -u -r build/libfreetype*.dylib

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/macos/${{matrix.ARCH}}
          find glfw/build/src -name "libglfw*.dylib" -exec cp {} artifacts/macos/${{matrix.ARCH}}/libglfw.dylib \;
          cp bgfx/.build/${{matrix.PLATFORM}}/bin/libbgfx-shared-libRelease.dylib artifacts/macos/${{matrix.ARCH}}/libbgfx.dylib
          find freetype/build -name "libfreetype*.dylib" -exec cp {} artifacts/macos/${{matrix.ARCH}}/libfreetype.dylib \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{matrix.ARCH}}
          path: artifacts/
          retention-days: 7

  windows-x64:
    name: Windows x64
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 3

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      # Build GLFW
      - name: Clone and build GLFW
        run: |
          git clone --depth 1 https://github.com/glfw/glfw.git glfw
          cd glfw
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF
          cmake --build build --config Release

      # Build bgfx
      - name: Clone bx, bimg & GENie
        run: |
          git clone --depth 1 https://github.com/bkaradzic/bx.git bx
          git clone --depth 1 https://github.com/bkaradzic/bimg.git bimg

      - name: Build bgfx
        run: |
          git clone --depth 1 https://github.com/bkaradzic/bgfx.git bgfx
          cd bgfx
          ..\bx\tools\bin\windows\genie --with-shared-lib vs2022 --platform x64
          msbuild .build\projects\vs2022\bgfx-shared-lib.vcxproj /p:Configuration=Release /p:Platform=x64

      # Build FreeType
      - name: Clone and build FreeType
        run: |
          git clone --depth 1 https://github.com/freetype/freetype.git freetype
          cd freetype
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DFT_DISABLE_HARFBUZZ=ON -DFT_DISABLE_BZIP2=ON -DFT_DISABLE_PNG=ON -DFT_DISABLE_BROTLI=ON
          cmake --build build --config Release

      - name: Prepare artifacts
        run: |
          mkdir artifacts\windows\x64
          copy glfw\build\src\Release\glfw3.dll artifacts\windows\x64\glfw3.dll
          copy bgfx\.build\win64_vs2022\bin\bgfx-shared-libRelease.dll artifacts\windows\x64\bgfx.dll
          copy freetype\build\Release\freetype.dll artifacts\windows\x64\freetype.dll
        shell: cmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64
          path: artifacts/
          retention-days: 7
