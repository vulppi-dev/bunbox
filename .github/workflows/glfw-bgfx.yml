name: Build GLFW & bgfx (vcpkg) and package artifacts

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/glfw-bgfx.yml'

concurrency:
  group: build-libs-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: build-${{ matrix.platform }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows (x64 only)
          - os: windows-latest
            platform: win32
            arch: x64
            triplet: x64-windows

          # Linux (x64 + arm64 via cross)
          - os: ubuntu-latest
            platform: linux
            arch: x64
            triplet: x64-linux-dynamic
          - os: ubuntu-24.04-arm
            platform: linux
            arch: arm64
            triplet: arm64-linux-dynamic

          # macOS (x64 + arm64)
          - os: macos-latest
            platform: mac
            arch: x64
            triplet: x64-osx-dynamic
          - os: macos-latest
            platform: mac
            arch: arm64
            triplet: arm64-osx-dynamic

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --------------------- Prereqs ---------------------
      - name: Install prerequisites (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail
          sudo apt-get update
          # Base toolchain + cache tools
          sudo apt-get install -y \
            build-essential git cmake ninja-build pkg-config \
            curl zip unzip tar

          # X11 + GL (GLVND/GLX) + extras que glfw/bgfx detectam no Linux
          sudo apt-get install -y \
            xorg-dev libx11-dev libxrandr-dev libxi-dev libxinerama-dev libxcursor-dev libxxf86vm-dev \
            libglvnd-dev libgl1-mesa-dev mesa-common-dev

          # EGL / GLES (bgfx/GLFW habilitam se presentes)
          sudo apt-get install -y \
            libegl1-mesa-dev libgles2-mesa-dev

          # DRM (às vezes detectado por bgfx)
          sudo apt-get install -y \
            libdrm-dev

          # Wayland (GLFW/bgfx detectam e usam se existir)
          sudo apt-get install -y \
            libwayland-dev wayland-protocols libxkbcommon-dev

          # Cross toolchain para arm64 (Ubuntu 24.04: usar pkgconf em vez de pkg-config-aarch64-*)
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu pkgconf
            # (Opcional) ajudar pkg-config multi-arch; se diretórios não existirem, tudo bem.
            echo "PKG_CONFIG_LIBDIR=/usr/aarch64-linux-gnu/lib/pkgconfig:/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> "$GITHUB_ENV" || true
          fi

      - name: Install prerequisites (macOS)
        if: runner.os == 'macOS'
        run: |
          set -euo pipefail
          brew update || true
          brew install cmake ninja || true

      # --------------------- vcpkg -----------------------
      - name: Clone/Update vcpkg
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p external
          if [ ! -d external/vcpkg/.git ]; then
            git clone --depth=1 https://github.com/microsoft/vcpkg.git external/vcpkg
          else
            git -C external/vcpkg pull --ff-only
          fi

      - name: Bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          & .\external\vcpkg\bootstrap-vcpkg.bat
          if (-not (Test-Path .\external\vcpkg\vcpkg.exe)) {
            Throw "vcpkg.exe not found after bootstrap"
          }

      - name: Bootstrap vcpkg (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          bash external/vcpkg/bootstrap-vcpkg.sh

      - name: Create overlay triplets (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p vcpkg-triplets
          cat > vcpkg-triplets/x64-linux-dynamic.cmake <<'EOF'
          set(VCPKG_TARGET_ARCHITECTURE x64)
          set(VCPKG_LIBRARY_LINKAGE dynamic)
          set(VCPKG_CRT_LINKAGE dynamic)
          set(VCPKG_CMAKE_SYSTEM_NAME Linux)
          EOF
          cat > vcpkg-triplets/arm64-linux-dynamic.cmake <<'EOF'
          set(VCPKG_TARGET_ARCHITECTURE arm64)
          set(VCPKG_LIBRARY_LINKAGE dynamic)
          set(VCPKG_CRT_LINKAGE dynamic)
          set(VCPKG_CMAKE_SYSTEM_NAME Linux)
          EOF
          cat > vcpkg-triplets/x64-osx-dynamic.cmake <<'EOF'
          set(VCPKG_TARGET_ARCHITECTURE x64)
          set(VCPKG_OSX_ARCHITECTURES "x86_64")
          set(VCPKG_LIBRARY_LINKAGE dynamic)
          set(VCPKG_CRT_LINKAGE dynamic)
          set(VCPKG_CMAKE_SYSTEM_NAME Darwin)
          EOF
          cat > vcpkg-triplets/arm64-osx-dynamic.cmake <<'EOF'
          set(VCPKG_TARGET_ARCHITECTURE arm64)
          set(VCPKG_OSX_ARCHITECTURES "arm64")
          set(VCPKG_LIBRARY_LINKAGE dynamic)
          set(VCPKG_CRT_LINKAGE dynamic)
          set(VCPKG_CMAKE_SYSTEM_NAME Darwin)
          EOF

      - name: Compute vcpkg commit
        id: vcpkg_rev
        shell: bash
        run: |
          set -euo pipefail
          echo "hash=$(git -C external/vcpkg rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Cache vcpkg artifacts
        uses: actions/cache@v4
        with:
          path: |
            external/vcpkg/installed
            external/vcpkg/packages
          key: v1-${{ runner.os }}-${{ matrix.triplet }}-${{ steps.vcpkg_rev.outputs.hash }}

      # --------------------- Build via vcpkg -------------
      - name: vcpkg install (glfw3 & bgfx) [Windows]
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          # Force bgfx shared library on Windows
          VCPKG_CMAKE_CONFIGURE_OPTIONS: -DBGFX_BUILD_SHARED_LIBS=ON
        run: |
          $triplet = '${{ matrix.triplet }}'
          $ports   = @("glfw3:$triplet", "bgfx:$triplet")
          & .\external\vcpkg\vcpkg.exe install $ports --clean-after-build

      - name: Build bgfx-shared-lib (Windows via bgfx.cmake)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          git config --global core.longpaths true
          git clone --depth=1 --recurse-submodules https://github.com/bkaradzic/bgfx.cmake.git external\bgfx.cmake
          # Garante submódulos com clone raso
          git -C external\bgfx.cmake submodule update --init --recursive --depth 1

          $buildDir = "external\bgfx.cmake\build"
          New-Item -ItemType Directory -Force -Path $buildDir | Out-Null

          # Mantém sua lógica atual de gerador
          $gen = (Get-Command ninja -ErrorAction SilentlyContinue) ? "Ninja" : "Visual Studio 17 2022"

          cmake -S external\bgfx.cmake -B $buildDir -G "$gen" `
            -DBGFX_BUILD_SHARED_LIBS=ON `
            -DBGFX_BUILD_EXAMPLES=OFF `
            -DBGFX_BUILD_TOOLS=OFF `
            -DBGFX_CONFIG_MULTITHREADED=ON `
            -DCMAKE_BUILD_TYPE=Release

          if ($gen -eq "Ninja") {
            cmake --build $buildDir --config Release --target bgfx-shared-lib -- -v
          } else {
            cmake --build $buildDir --config Release --target bgfx-shared-lib
          }

          $dst = "dist-libs\win32\${{ matrix.arch }}"
          New-Item -ItemType Directory -Force -Path $dst | Out-Null
          Get-ChildItem -Recurse $buildDir -Filter "bgfx-shared-lib*.dll" | ForEach-Object { Copy-Item $_.FullName $dst -Force }
          Get-ChildItem -Recurse $buildDir -Include "bgfx-shared-lib*.pdb","bgfx-shared-lib*.lib" | ForEach-Object { Copy-Item $_.FullName $dst -Force }

      - name: vcpkg install (glfw3 & bgfx) [Linux/macOS]
        if: runner.os != 'Windows'
        shell: bash
        env:
          VCPKG_OVERLAY_TRIPLETS: ${{ github.workspace }}/vcpkg-triplets
        run: |
          set -euo pipefail
          external/vcpkg/vcpkg install glfw3:${{ matrix.triplet }} bgfx:${{ matrix.triplet }} --clean-after-build

      # --- Coletar logs se falhar (Linux) ---------------
      - name: Upload bgfx build logs (on failure)
        if: failure() && runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: logs-linux-bgfx
          path: |
            external/vcpkg/buildtrees/bgfx/*.log
            external/vcpkg/buildtrees/bgfx/*/*.log
            external/vcpkg/buildtrees/*/config-*.log
            external/vcpkg/buildtrees/*/*-out.log
          if-no-files-found: warn
          retention-days: 7

      # --------------------- Collect libs ----------------
      - name: Prepare dist tree
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist-libs/win32/x64 dist-libs/linux/x64 dist-libs/linux/arm64 dist-libs/mac/x64 dist-libs/mac/arm64

      - name: Copy shared libraries to dist [Windows]
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $Triplet = '${{ matrix.triplet }}'
          $Root    = "external/vcpkg/installed/$Triplet"
          $Dst     = "dist-libs/win32/${{ matrix.arch }}"
          New-Item -ItemType Directory -Force -Path $Dst | Out-Null

          $Dirs = @(
            (Join-Path $Root "bin"),
            (Join-Path $Root "debug\bin")
          )

          foreach ($Dir in $Dirs) {
            if (Test-Path $Dir) {
              Copy-Item (Join-Path $Dir "*glfw*.dll") $Dst -ErrorAction SilentlyContinue
              Copy-Item (Join-Path $Dir "*bimg*.dll") $Dst -ErrorAction SilentlyContinue
              Copy-Item (Join-Path $Dir "*bx*.dll")   $Dst -ErrorAction SilentlyContinue
              # Caso o port do vcpkg tenha gerado algum bgfx.dll, isso também traz
              Copy-Item (Join-Path $Dir "*bgfx*.dll") $Dst -ErrorAction SilentlyContinue
            }
          }

          # Verificação útil: falha se o bgfx não existir
          if (-not (Get-ChildItem $Dst -Filter "bgfx*.dll" -ErrorAction SilentlyContinue)) {
            Write-Host "Conteúdo do dist:"
            Get-ChildItem $Dst | Format-Table -AutoSize
            Throw "bgfx DLL not found. The step 'Build bgfx-shared-lib' should have produced it."
          }

      - name: Copy shared libraries to dist [Linux/macOS]
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          TRIPLET="${{ matrix.triplet }}"
          ROOT="external/vcpkg/installed/${TRIPLET}"
          LIB="${ROOT}/lib"
          case "${{ matrix.platform }}" in
            linux)
              DST="dist-libs/linux/${{ matrix.arch }}"
              mkdir -p "$DST"
              cp -a ${LIB}/libglfw*.so* "$DST" 2>/dev/null || true
              cp -a ${LIB}/libbgfx*.so* "$DST" 2>/dev/null || true
              cp -a ${LIB}/libbimg*.so* "$DST" 2>/dev/null || true
              cp -a ${LIB}/libbx*.so*   "$DST" 2>/dev/null || true
              ;;
            mac)
              DST="dist-libs/mac/${{ matrix.arch }}"
              mkdir -p "$DST"
              cp -a ${LIB}/libglfw*.dylib "$DST" 2>/dev/null || true
              cp -a ${LIB}/libbgfx*.dylib "$DST" 2>/dev/null || true
              cp -a ${LIB}/libbimg*.dylib "$DST" 2>/dev/null || true
              cp -a ${LIB}/libbx*.dylib   "$DST" 2>/dev/null || true
              ;;
          esac

      - name: Upload artifact (per-target)
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist-libs/${{ matrix.platform }}/${{ matrix.arch }}
          if-no-files-found: error
          retention-days: 7
