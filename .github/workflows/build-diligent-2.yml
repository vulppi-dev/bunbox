name: Build Diligent (shared libs, minimal backends)

on:
  workflow_dispatch:
  push:
    branches: [master]
    paths:
      - '.github/workflows/build-diligent-2.yml'

jobs:
  linux-x64:
    name: Linux x64 (Vulkan only)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 3 }

      - name: Install build deps (Vulkan)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libvulkan-dev mesa-vulkan-drivers

      - name: Clone Diligent (with submodules)
        run: git clone --depth 1 --recursive https://github.com/DiligentGraphics/DiligentEngine.git DiligentEngine

      - name: Configure (Release, Vulkan only)
        run: |
          cmake -S DiligentEngine -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DDILIGENT_BUILD_SAMPLES=OFF \
            -DDILIGENT_BUILD_TOOLS=OFF \
            -DDILIGENT_BUILD_FX=OFF \
            -DDILIGENT_NO_OPENGL=ON \
            -DDILIGENT_NO_METAL=ON \
            -DDILIGENT_NO_DIRECT3D11=ON \
            -DDILIGENT_NO_DIRECT3D12=ON \
            -DDILIGENT_NO_WEBGPU=ON

      - name: Build shared lib (Vulkan)
        run: cmake --build build --config Release --target Diligent-GraphicsEngineVk-shared

      - name: Collect artifacts
        run: |
          mkdir -p artifacts/x64/linux
          find build -type f -name "libGraphicsEngineVk.so*" -exec cp {} artifacts/x64/linux/ \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: artifacts/
          retention-days: 7

  linux-arm64:
    name: Linux ARM64 (cross, Vulkan only)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 3 }

      - name: Enable arm64 repos (ports.ubuntu.com) & update
        run: |
          sudo dpkg --add-architecture arm64
          sudo tee /etc/apt/sources.list >/dev/null <<'EOF'
          # amd64
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy-backports main restricted universe multiverse
          deb [arch=amd64] http://security.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
          # arm64 (ports)
          deb [arch=arm64] https://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse
          deb [arch=arm64] https://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse
          deb [arch=arm64] https://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse
          deb [arch=arm64] https://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse
          EOF
          sudo apt-get -yq update

      - name: Install cross toolchain + Vulkan (arm64)
        run: |
          sudo apt-get install -y cmake gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross libvulkan-dev:arm64

      - name: Clone Diligent (with submodules)
        run: git clone --depth 1 --recursive https://github.com/DiligentGraphics/DiligentEngine.git DiligentEngine

      - name: Toolchain file (aarch64)
        run: |
          mkdir -p toolchains
          cat > toolchains/aarch64.cmake << 'EOF'
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR aarch64)
          set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
          set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
          set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF
          ls -la toolchains

      - name: Configure (Release, Vulkan only; Makefiles)
        env:
          TOOLCHAIN: ${{ github.workspace }}/toolchains/aarch64.cmake
        run: |
          cmake -S DiligentEngine -B build \
            -G "Unix Makefiles" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE="${TOOLCHAIN}" \
            -DDILIGENT_BUILD_SAMPLES=OFF \
            -DDILIGENT_BUILD_TOOLS=OFF \
            -DDILIGENT_BUILD_FX=OFF \
            -DDILIGENT_NO_OPENGL=ON \
            -DDILIGENT_NO_METAL=ON \
            -DDILIGENT_NO_DIRECT3D11=ON \
            -DDILIGENT_NO_DIRECT3D12=ON \
            -DDILIGENT_NO_WEBGPU=ON

      - name: Build shared lib (Vulkan)
        run: cmake --build build --config Release --target Diligent-GraphicsEngineVk-shared

      - name: Collect artifacts
        run: |
          mkdir -p artifacts/arm64/linux
          find build -type f -name "libGraphicsEngineVk.so*" -exec cp {} artifacts/arm64/linux/ \; || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: artifacts/
          retention-days: 7

  macos:
    name: macOS (Vulkan only via MoltenVK)
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64, arm64]
        include:
          - ARCH: x64
            CMAKE_ARCH: x86_64
            OSX_MIN: '10.15'
          - ARCH: arm64
            CMAKE_ARCH: arm64
            OSX_MIN: '11.0'
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 3 }

      - name: Install Vulkan SDK + MoltenVK
        run: |
          brew update >/dev/null
          brew install --cask vulkan-sdk
          brew install molten-vk
          # detect Vulkan SDK dir (cask installs in /Applications/VulkanSDK/<ver>)
          SDK_DIR=$(ls -1d /Applications/VulkanSDK/* | sort -V | tail -n1)
          if [ -z "$SDK_DIR" ]; then echo "Vulkan SDK not found"; exit 1; fi
          echo "VULKAN_SDK=$SDK_DIR" >> $GITHUB_ENV
          echo "Using VULKAN_SDK=$SDK_DIR"

      - name: Clone Diligent (with submodules)
        run: git clone --depth 1 --recursive https://github.com/DiligentGraphics/DiligentEngine.git DiligentEngine

      - name: Configure (Release, Vulkan only)
        run: |
          cmake -S DiligentEngine -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.CMAKE_ARCH }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.OSX_MIN }} \
            -DDILIGENT_BUILD_SAMPLES=OFF \
            -DDILIGENT_BUILD_TOOLS=OFF \
            -DDILIGENT_BUILD_FX=OFF \
            -DDILIGENT_NO_OPENGL=ON \
            -DDILIGENT_NO_METAL=ON \
            -DDILIGENT_NO_DIRECT3D11=ON \
            -DDILIGENT_NO_DIRECT3D12=ON \
            -DDILIGENT_NO_WEBGPU=ON

      - name: Build shared lib (Vulkan)
        run: cmake --build build --config Release --target Diligent-GraphicsEngineVk-shared

      - name: Collect artifacts
        run: |
          mkdir -p artifacts/${{ matrix.ARCH }}/darwin
          find build -type f -name "libGraphicsEngineVk.dylib" -exec cp {} artifacts/${{ matrix.ARCH }}/darwin/ \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.ARCH }}
          path: artifacts/
          retention-days: 7

  windows-x64:
    name: Windows x64 (D3D12 + Vulkan)
    runs-on: windows-2022
    defaults: { run: { shell: cmd } }
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 3 }

      - uses: ilammy/msvc-dev-cmd@v1
        with: { arch: amd64 }

      - name: Install Vulkan SDK (winget)
        shell: powershell
        run: |
          winget install --id LunarG.VulkanSDK -e --silent --accept-package-agreements --accept-source-agreements
          $cands=@("C:\VulkanSDK","C:\Program Files\VulkanSDK")
          $sdk=$null
          foreach($c in $cands){ if(Test-Path $c){ $sdk=(Get-ChildItem $c | Sort-Object Name -Descending | Select-Object -First 1).FullName; break } }
          if(-not $sdk){ throw "Vulkan SDK not found after winget install." }
          "VULKAN_SDK=$sdk" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "VULKAN_SDK=$sdk"

      - name: Clone Diligent (with submodules)
        run: git clone --depth 1 --recursive https://github.com/DiligentGraphics/DiligentEngine.git DiligentEngine

      - name: Configure (Release, D3D12 + Vulkan only)
        run: |
          cmake -S DiligentEngine -B build -G "Visual Studio 17 2022" -A x64 ^
            -DDILIGENT_BUILD_SAMPLES=OFF ^
            -DDILIGENT_BUILD_TOOLS=OFF ^
            -DDILIGENT_BUILD_FX=OFF ^
            -DDILIGENT_NO_OPENGL=ON ^
            -DDILIGENT_NO_DIRECT3D11=ON ^
            -DDILIGENT_NO_METAL=ON ^
            -DDILIGENT_NO_WEBGPU=ON

      - name: Build shared libs
        run: |
          cmake --build build --config Release --target ^
            Diligent-GraphicsEngineD3D12-shared ^
            Diligent-GraphicsEngineVk-shared

      - name: Collect DLLs
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path artifacts\x64\win32 | Out-Null
          Get-ChildItem -Recurse -Path build -Filter "GraphicsEngine*.dll" | Copy-Item -Destination artifacts\x64\win32 -Force

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64
          path: artifacts/
          retention-days: 7
