import { dlopen } from 'bun:ffi';
import { BGFX_PATH } from '../paths';
import {
  bgfx_init_ctor,
  bgfx_init,
  bgfx_shutdown,
  bgfx_reset,
  bgfx_frame,
  bgfx_get_renderer_type,
  bgfx_get_caps,
  bgfx_get_stats,
  bgfx_get_supported_renderers,
  bgfx_get_renderer_name,
  bgfx_set_platform_data,
  bgfx_get_internal_data,
  bgfx_override_internal_texture_ptr,
  bgfx_override_internal_texture,
  bgfx_alloc,
  bgfx_copy,
  bgfx_make_ref,
  bgfx_make_ref_release,
  bgfx_create_shader,
  bgfx_get_shader_uniforms,
  bgfx_destroy_shader,
  bgfx_create_program,
  bgfx_create_compute_program,
  bgfx_destroy_program,
  bgfx_create_texture,
  bgfx_create_texture_2d,
  bgfx_create_texture_2d_scaled,
  bgfx_create_texture_3d,
  bgfx_create_texture_cube,
  bgfx_update_texture_2d,
  bgfx_update_texture_3d,
  bgfx_update_texture_cube,
  bgfx_read_texture,
  bgfx_destroy_texture,
  bgfx_calc_texture_size,
  bgfx_create_frame_buffer,
  bgfx_create_frame_buffer_scaled,
  bgfx_create_frame_buffer_from_handles,
  bgfx_create_frame_buffer_from_attachment,
  bgfx_create_frame_buffer_from_nwh,
  bgfx_set_frame_buffer_name,
  bgfx_get_texture,
  bgfx_destroy_frame_buffer,
  bgfx_create_uniform,
  bgfx_get_uniform_info,
  bgfx_destroy_uniform,
  bgfx_create_vertex_layout,
  bgfx_destroy_vertex_layout,
  bgfx_create_vertex_buffer,
  bgfx_set_vertex_buffer_name,
  bgfx_destroy_vertex_buffer,
  bgfx_create_dynamic_vertex_buffer,
  bgfx_create_dynamic_vertex_buffer_mem,
  bgfx_update_dynamic_vertex_buffer,
  bgfx_destroy_dynamic_vertex_buffer,
  bgfx_create_index_buffer,
  bgfx_set_index_buffer_name,
  bgfx_destroy_index_buffer,
  bgfx_create_dynamic_index_buffer,
  bgfx_create_dynamic_index_buffer_mem,
  bgfx_update_dynamic_index_buffer,
  bgfx_destroy_dynamic_index_buffer,
  bgfx_alloc_transient_index_buffer,
  bgfx_alloc_transient_vertex_buffer,
  bgfx_alloc_transient_buffers,
  bgfx_check_avail_transient_index_buffer,
  bgfx_check_avail_transient_vertex_buffer,
  bgfx_vertex_layout_begin,
  bgfx_vertex_layout_add,
  bgfx_vertex_layout_skip,
  bgfx_vertex_layout_end,
  bgfx_set_view_name,
  bgfx_set_view_rect,
  bgfx_set_view_scissor,
  bgfx_set_view_clear,
  bgfx_set_view_clear_mrt,
  bgfx_set_view_mode,
  bgfx_set_view_frame_buffer,
  bgfx_set_view_transform,
  bgfx_reset_view,
  bgfx_begin,
  bgfx_end,
  bgfx_set_state,
  bgfx_set_stencil,
  bgfx_set_scissor,
  bgfx_set_transform,
  bgfx_set_transform_cached,
  bgfx_alloc_transform,
  bgfx_set_uniform,
  bgfx_set_index_buffer,
  bgfx_set_dynamic_index_buffer,
  bgfx_set_transient_index_buffer,
  bgfx_set_vertex_buffer,
  bgfx_set_dynamic_vertex_buffer,
  bgfx_set_transient_vertex_buffer,
  bgfx_set_vertex_count,
  bgfx_set_instance_data_buffer,
  bgfx_set_texture,
  bgfx_submit,
  bgfx_submit_occlusion_query,
  bgfx_submit_indirect,
  bgfx_submit_indirect_count,
  bgfx_discard,
  bgfx_dispatch,
  bgfx_dispatch_indirect,
  bgfx_blit,
} from './functions';

if (!BGFX_PATH) {
  throw new Error(
    `Unsupported platform or architecture: ${process.platform} ${process.arch}`,
  );
}

const { symbols: BGFX, close: bgfxClose } = dlopen(BGFX_PATH, {
  bgfx_init_ctor,
  bgfx_init,
  bgfx_shutdown,
  bgfx_reset,
  bgfx_frame,
  bgfx_get_renderer_type,
  bgfx_get_caps,
  bgfx_get_stats,
  bgfx_get_supported_renderers,
  bgfx_get_renderer_name,
  bgfx_set_platform_data,
  bgfx_get_internal_data,
  bgfx_override_internal_texture_ptr,
  bgfx_override_internal_texture,
  bgfx_alloc,
  bgfx_copy,
  bgfx_make_ref,
  bgfx_make_ref_release,
  bgfx_create_shader,
  bgfx_get_shader_uniforms,
  bgfx_destroy_shader,
  bgfx_create_program,
  bgfx_create_compute_program,
  bgfx_destroy_program,
  bgfx_create_texture,
  bgfx_create_texture_2d,
  bgfx_create_texture_2d_scaled,
  bgfx_create_texture_3d,
  bgfx_create_texture_cube,
  bgfx_update_texture_2d,
  bgfx_update_texture_3d,
  bgfx_update_texture_cube,
  bgfx_read_texture,
  bgfx_destroy_texture,
  bgfx_calc_texture_size,
  bgfx_create_frame_buffer,
  bgfx_create_frame_buffer_scaled,
  bgfx_create_frame_buffer_from_handles,
  bgfx_create_frame_buffer_from_attachment,
  bgfx_create_frame_buffer_from_nwh,
  bgfx_set_frame_buffer_name,
  bgfx_get_texture,
  bgfx_destroy_frame_buffer,
  bgfx_create_uniform,
  bgfx_get_uniform_info,
  bgfx_destroy_uniform,
  bgfx_create_vertex_layout,
  bgfx_destroy_vertex_layout,
  bgfx_create_vertex_buffer,
  bgfx_set_vertex_buffer_name,
  bgfx_destroy_vertex_buffer,
  bgfx_create_dynamic_vertex_buffer,
  bgfx_create_dynamic_vertex_buffer_mem,
  bgfx_update_dynamic_vertex_buffer,
  bgfx_destroy_dynamic_vertex_buffer,
  bgfx_create_index_buffer,
  bgfx_set_index_buffer_name,
  bgfx_destroy_index_buffer,
  bgfx_create_dynamic_index_buffer,
  bgfx_create_dynamic_index_buffer_mem,
  bgfx_update_dynamic_index_buffer,
  bgfx_destroy_dynamic_index_buffer,
  bgfx_alloc_transient_index_buffer,
  bgfx_alloc_transient_vertex_buffer,
  bgfx_alloc_transient_buffers,
  bgfx_check_avail_transient_index_buffer,
  bgfx_check_avail_transient_vertex_buffer,
  bgfx_vertex_layout_begin,
  bgfx_vertex_layout_add,
  bgfx_vertex_layout_skip,
  bgfx_vertex_layout_end,
  bgfx_set_view_name,
  bgfx_set_view_rect,
  bgfx_set_view_scissor,
  bgfx_set_view_clear,
  bgfx_set_view_clear_mrt,
  bgfx_set_view_mode,
  bgfx_set_view_frame_buffer,
  bgfx_set_view_transform,
  bgfx_reset_view,
  bgfx_begin,
  bgfx_end,
  bgfx_set_state,
  bgfx_set_stencil,
  bgfx_set_scissor,
  bgfx_set_transform,
  bgfx_set_transform_cached,
  bgfx_alloc_transform,
  bgfx_set_uniform,
  bgfx_set_index_buffer,
  bgfx_set_dynamic_index_buffer,
  bgfx_set_transient_index_buffer,
  bgfx_set_vertex_buffer,
  bgfx_set_dynamic_vertex_buffer,
  bgfx_set_transient_vertex_buffer,
  bgfx_set_vertex_count,
  bgfx_set_instance_data_buffer,
  bgfx_set_texture,
  bgfx_submit,
  bgfx_submit_occlusion_query,
  bgfx_submit_indirect,
  bgfx_submit_indirect_count,
  bgfx_discard,
  bgfx_dispatch,
  bgfx_dispatch_indirect,
  bgfx_blit,
});

process.on('exit', () => {
  bgfxClose();
});

export * as BGFX_ENUMS from './enums';
export * as BGFX_STRUCTS from './structs';
export * as BGFX_TYPES from './types';
export { BGFX };
