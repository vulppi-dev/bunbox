import { dlopen } from 'bun:ffi';
import { GLFW_PATH } from '../paths';
import {
  glfwInit,
  glfwTerminate,
  glfwInitHint,
  glfwGetVersion,
  glfwGetVersionString,
  glfwGetError,
  glfwSetErrorCallback,
  glfwGetPlatform,
  glfwPlatformSupported,
  glfwDefaultWindowHints,
  glfwWindowHint,
  glfwWindowHintString,
  glfwCreateWindow,
  glfwDestroyWindow,
  glfwWindowShouldClose,
  glfwSetWindowShouldClose,
  glfwGetWindowTitle,
  glfwSetWindowTitle,
  glfwSetWindowIcon,
  glfwGetWindowPos,
  glfwSetWindowPos,
  glfwGetWindowSize,
  glfwSetWindowSizeLimits,
  glfwSetWindowAspectRatio,
  glfwSetWindowSize,
  glfwGetFramebufferSize,
  glfwGetWindowFrameSize,
  glfwGetWindowContentScale,
  glfwGetWindowOpacity,
  glfwSetWindowOpacity,
  glfwIconifyWindow,
  glfwRestoreWindow,
  glfwMaximizeWindow,
  glfwShowWindow,
  glfwHideWindow,
  glfwFocusWindow,
  glfwRequestWindowAttention,
  glfwGetWindowMonitor,
  glfwSetWindowMonitor,
  glfwGetWindowAttrib,
  glfwSetWindowAttrib,
  glfwSetWindowUserPointer,
  glfwGetWindowUserPointer,
  glfwSetWindowPosCallback,
  glfwSetWindowSizeCallback,
  glfwSetWindowCloseCallback,
  glfwSetWindowRefreshCallback,
  glfwSetWindowFocusCallback,
  glfwSetWindowIconifyCallback,
  glfwSetWindowMaximizeCallback,
  glfwSetFramebufferSizeCallback,
  glfwSetWindowContentScaleCallback,
  glfwPollEvents,
  glfwWaitEvents,
  glfwWaitEventsTimeout,
  glfwPostEmptyEvent,
  glfwGetMonitors,
  glfwGetPrimaryMonitor,
  glfwGetMonitorPos,
  glfwGetMonitorWorkarea,
  glfwGetMonitorContentScale,
  glfwGetMonitorName,
  glfwSetMonitorUserPointer,
  glfwGetMonitorUserPointer,
  glfwSetMonitorCallback,
  glfwGetVideoModes,
  glfwGetVideoMode,
  glfwGetWin32Adapter,
  glfwGetWin32Monitor,
  glfwGetWin32Window,
  glfwGetCocoaMonitor,
  glfwGetCocoaWindow,
  glfwGetCocoaView,
  glfwGetX11Display,
  glfwGetX11Adapter,
  glfwGetX11Monitor,
  glfwGetX11Window,
  glfwGetWaylandDisplay,
  glfwGetWaylandMonitor,
  glfwGetWaylandWindow,
  glfwGetInputMode,
  glfwSetInputMode,
  glfwRawMouseMotionSupported,
  glfwGetKeyName,
  glfwGetKeyScancode,
  glfwGetKey,
  glfwGetMouseButton,
  glfwGetCursorPos,
  glfwSetCursorPos,
  glfwCreateCursor,
  glfwCreateStandardCursor,
  glfwDestroyCursor,
  glfwSetCursor,
  glfwSetKeyCallback,
  glfwSetCharCallback,
  glfwSetCharModsCallback,
  glfwSetMouseButtonCallback,
  glfwSetCursorPosCallback,
  glfwSetCursorEnterCallback,
  glfwSetScrollCallback,
  glfwSetDropCallback,
  glfwJoystickPresent,
  glfwGetJoystickAxes,
  glfwGetJoystickButtons,
  glfwGetJoystickHats,
  glfwGetJoystickName,
  glfwGetJoystickGUID,
  glfwSetJoystickUserPointer,
  glfwGetJoystickUserPointer,
  glfwJoystickIsGamepad,
  glfwSetJoystickCallback,
  glfwUpdateGamepadMappings,
  glfwGetGamepadName,
  glfwGetGamepadState,
  glfwSetClipboardString,
  glfwGetClipboardString,
  glfwGetTime,
  glfwSetTime,
  glfwGetTimerValue,
  glfwGetTimerFrequency,
} from './functions';

if (!GLFW_PATH) {
  throw new Error(
    `Unsupported platform or architecture: ${process.platform} ${process.arch}`,
  );
}

const { symbols: GLFW, close: glfwClose } = dlopen(GLFW_PATH, {
  glfwInit,
  glfwTerminate,
  glfwInitHint,
  glfwGetVersion,
  glfwGetVersionString,
  glfwGetError,
  glfwSetErrorCallback,
  glfwGetPlatform,
  glfwPlatformSupported,
  glfwDefaultWindowHints,
  glfwWindowHint,
  glfwWindowHintString,
  glfwCreateWindow,
  glfwDestroyWindow,
  glfwWindowShouldClose,
  glfwSetWindowShouldClose,
  glfwGetWindowTitle,
  glfwSetWindowTitle,
  glfwSetWindowIcon,
  glfwGetWindowPos,
  glfwSetWindowPos,
  glfwGetWindowSize,
  glfwSetWindowSizeLimits,
  glfwSetWindowAspectRatio,
  glfwSetWindowSize,
  glfwGetFramebufferSize,
  glfwGetWindowFrameSize,
  glfwGetWindowContentScale,
  glfwGetWindowOpacity,
  glfwSetWindowOpacity,
  glfwIconifyWindow,
  glfwRestoreWindow,
  glfwMaximizeWindow,
  glfwShowWindow,
  glfwHideWindow,
  glfwFocusWindow,
  glfwRequestWindowAttention,
  glfwGetWindowMonitor,
  glfwSetWindowMonitor,
  glfwGetWindowAttrib,
  glfwSetWindowAttrib,
  glfwSetWindowUserPointer,
  glfwGetWindowUserPointer,
  glfwSetWindowPosCallback,
  glfwSetWindowSizeCallback,
  glfwSetWindowCloseCallback,
  glfwSetWindowRefreshCallback,
  glfwSetWindowFocusCallback,
  glfwSetWindowIconifyCallback,
  glfwSetWindowMaximizeCallback,
  glfwSetFramebufferSizeCallback,
  glfwSetWindowContentScaleCallback,
  glfwPollEvents,
  glfwWaitEvents,
  glfwWaitEventsTimeout,
  glfwPostEmptyEvent,
  glfwGetMonitors,
  glfwGetPrimaryMonitor,
  glfwGetMonitorPos,
  glfwGetMonitorWorkarea,
  glfwGetMonitorContentScale,
  glfwGetMonitorName,
  glfwSetMonitorUserPointer,
  glfwGetMonitorUserPointer,
  glfwSetMonitorCallback,
  glfwGetVideoModes,
  glfwGetVideoMode,
  glfwGetInputMode,
  glfwSetInputMode,
  glfwRawMouseMotionSupported,
  glfwGetKeyName,
  glfwGetKeyScancode,
  glfwGetKey,
  glfwGetMouseButton,
  glfwGetCursorPos,
  glfwSetCursorPos,
  glfwCreateCursor,
  glfwCreateStandardCursor,
  glfwDestroyCursor,
  glfwSetCursor,
  glfwSetKeyCallback,
  glfwSetCharCallback,
  glfwSetCharModsCallback,
  glfwSetMouseButtonCallback,
  glfwSetCursorPosCallback,
  glfwSetCursorEnterCallback,
  glfwSetScrollCallback,
  glfwSetDropCallback,
  glfwJoystickPresent,
  glfwGetJoystickAxes,
  glfwGetJoystickButtons,
  glfwGetJoystickHats,
  glfwGetJoystickName,
  glfwGetJoystickGUID,
  glfwSetJoystickUserPointer,
  glfwGetJoystickUserPointer,
  glfwJoystickIsGamepad,
  glfwSetJoystickCallback,
  glfwUpdateGamepadMappings,
  glfwGetGamepadName,
  glfwGetGamepadState,
  glfwSetClipboardString,
  glfwGetClipboardString,
  glfwGetTime,
  glfwSetTime,
  glfwGetTimerValue,
  glfwGetTimerFrequency,

  ...(process.platform === 'win32'
    ? { glfwGetWin32Adapter, glfwGetWin32Monitor, glfwGetWin32Window }
    : {}),
  ...(process.platform === 'linux'
    ? {
        glfwGetX11Display,
        glfwGetX11Adapter,
        glfwGetX11Monitor,
        glfwGetX11Window,
        glfwGetWaylandDisplay,
        glfwGetWaylandMonitor,
        glfwGetWaylandWindow,
      }
    : {}),
  ...(process.platform === 'darwin'
    ? { glfwGetCocoaMonitor, glfwGetCocoaWindow, glfwGetCocoaView }
    : {}),
});

process.on('exit', () => {
  glfwClose();
});

export * as GLFW_ENUMS from './enums';
export * as GLFW_STRUCTS from './structs';
export * as GLFW_TYPES from './types';
export { GLFW };
